///
/// RequestMethod.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::fastio {

  /**
   * An enum which can be represented as a JavaScript union (RequestMethod).
   */
  enum class RequestMethod {
    POST      SWIFT_NAME(post) = 0,
    GET      SWIFT_NAME(get) = 1,
    PUT      SWIFT_NAME(put) = 2,
    DELETE      SWIFT_NAME(delete) = 3,
    PATCH      SWIFT_NAME(patch) = 4,
    HEAD      SWIFT_NAME(head) = 5,
    OPTIONS      SWIFT_NAME(options) = 6,
  } CLOSED_ENUM;

} // namespace margelo::nitro::fastio

namespace margelo::nitro {

  using namespace margelo::nitro::fastio;

  // C++ RequestMethod <> JS RequestMethod (union)
  template <>
  struct JSIConverter<RequestMethod> {
    static inline RequestMethod fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("POST"): return RequestMethod::POST;
        case hashString("GET"): return RequestMethod::GET;
        case hashString("PUT"): return RequestMethod::PUT;
        case hashString("DELETE"): return RequestMethod::DELETE;
        case hashString("PATCH"): return RequestMethod::PATCH;
        case hashString("HEAD"): return RequestMethod::HEAD;
        case hashString("OPTIONS"): return RequestMethod::OPTIONS;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum RequestMethod - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, RequestMethod arg) {
      switch (arg) {
        case RequestMethod::POST: return JSIConverter<std::string>::toJSI(runtime, "POST");
        case RequestMethod::GET: return JSIConverter<std::string>::toJSI(runtime, "GET");
        case RequestMethod::PUT: return JSIConverter<std::string>::toJSI(runtime, "PUT");
        case RequestMethod::DELETE: return JSIConverter<std::string>::toJSI(runtime, "DELETE");
        case RequestMethod::PATCH: return JSIConverter<std::string>::toJSI(runtime, "PATCH");
        case RequestMethod::HEAD: return JSIConverter<std::string>::toJSI(runtime, "HEAD");
        case RequestMethod::OPTIONS: return JSIConverter<std::string>::toJSI(runtime, "OPTIONS");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert RequestMethod to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("POST"):
        case hashString("GET"):
        case hashString("PUT"):
        case hashString("DELETE"):
        case hashString("PATCH"):
        case hashString("HEAD"):
        case hashString("OPTIONS"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
